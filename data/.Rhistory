}
brca.Pats = do.call(rbind, brca.Pats)
dim(brca.Pats)
brca.Pats
diff.Exp.Genes <- "NECAB3"
all.Found = F
page.Counter = 1
mRNA.Exp = list()
page.Size = 2000 # using a bigger page size is faster
temp <- Samples.mRNASeq(gene = diff.Exp.Genes,
tcga_participant_barcode =
brca.Pats$tcga_participant_barcode,
page_size = page.Size,
page = page.Counter)
#if(is.null(temp)){next}
while(all.Found == F){
mRNA.Exp[[page.Counter]] = Samples.mRNASeq(gene = diff.Exp.Genes,
tcga_participant_barcode =
brca.Pats$tcga_participant_barcode,
page_size = page.Size,
page = page.Counter)
if(nrow(mRNA.Exp[[page.Counter]]) < page.Size)
all.Found = T
else
page.Counter = page.Counter + 1
}
mRNA.Exp = do.call(rbind, mRNA.Exp)
dim(mRNA.Exp)
diff.Exp.Genes <- "NECAB3"
all.Found = F
page.Counter = 1
mRNA.Exp = list()
page.Size = 2000 # using a bigger page size is faster
temp <- Samples.mRNASeq(gene = diff.Exp.Genes,
tcga_participant_barcode =
brca.Pats$tcga_participant_barcode,
page_size = page.Size,
page = page.Counter)
diff.Exp.Genes
temp
diff.Exp.Genes <- "APBA3"
all.Found = F
page.Counter = 1
mRNA.Exp = list()
page.Size = 2000 # using a bigger page size is faster
temp <- Samples.mRNASeq(gene = diff.Exp.Genes,
tcga_participant_barcode =
brca.Pats$tcga_participant_barcode,
page_size = page.Size,
page = page.Counter)
temp
require(FirebrowseR)
cohorts = Metadata.Cohorts() # Download all available cohorts
cancerName <- cohorts$cohort
dat <- vector("list",length(cancerName))
names(dat) <- cancerName
for(i in seq_along(cancerName)){
#cancer.Type = cohorts[grep("breast", cohorts$description, ignore.case = T), 1]
cat(cancerName[i],"\n")
cancer.Type = cancerName[i]
all.Received = F
page.Counter = 1
brca.Pats = list()
while(all.Received == F){
brca.Pats[[page.Counter]] = Samples.ClinicalTier1(cohort = cancer.Type,
page = page.Counter)
if(page.Counter > 1)
colnames(brca.Pats[[page.Counter]]) = colnames(brca.Pats[[page.Counter-1]])
if(nrow(brca.Pats[[page.Counter]]) < 250){
all.Received = T
} else{
page.Counter = page.Counter + 1
}
}
brca.Pats = do.call(rbind, brca.Pats)
dim(brca.Pats)
#brca.Pats = brca.Pats[ which(brca.Pats$vital_status == 1), ]
#diff.Exp.Genes = c("ESR1", "GATA3", "XBP1", "FOXA1", "ERBB2", "GRB7", "EGFR",
#                   "FOXC1", "MYC")
diff.Exp.Genes <- "NECAB3"
all.Found = F
page.Counter = 1
mRNA.Exp = list()
page.Size = 2000 # using a bigger page size is faster
temp <- Samples.mRNASeq(gene = diff.Exp.Genes,
tcga_participant_barcode =
brca.Pats$tcga_participant_barcode,
page_size = page.Size,
page = page.Counter)
if(is.null(temp)){next}
while(all.Found == F){
mRNA.Exp[[page.Counter]] = Samples.mRNASeq(gene = diff.Exp.Genes,
tcga_participant_barcode =
brca.Pats$tcga_participant_barcode,
page_size = page.Size,
page = page.Counter)
if(nrow(mRNA.Exp[[page.Counter]]) < page.Size)
all.Found = T
else
page.Counter = page.Counter + 1
}
mRNA.Exp = do.call(rbind, mRNA.Exp)
dim(mRNA.Exp)
# Patients with normal tissue
normal.Tissue.Pats = which(mRNA.Exp$sample_type == "NT")
# get the patients barcodes
patient.Barcodes = mRNA.Exp$tcga_participant_barcode[normal.Tissue.Pats]
# Subset the mRNA.Exp data frame, keeping only the pre-selected barcodes AND
# having a sample type of NT or TP
mRNA.Exp = mRNA.Exp[which(mRNA.Exp$tcga_participant_barcode %in% patient.Barcodes &
mRNA.Exp$sample_type %in% c("NT", "TP")), ]
dat[[i]] <- mRNA.Exp
cat(i,"\n")
}
isnotnull <- which(sapply(dat,function(x)!is.null(x)))
dat2 <- dat[isnotnull]
num <- unlist(sapply(dat2,function(x)nrow(x)))
dat3 <- dat2[which(num>=5)]
library(ggplot2)
t_res <- vector("list",length(dat3))
for(i in seq_along(dat3)){
mRNA.Exp <- dat3[[i]]
cases <- mRNA.Exp$expression_log2[mRNA.Exp$sample_type=="TP"]
controls <- mRNA.Exp$expression_log2[mRNA.Exp$sample_type=="NT"]
t_res[[i]] <- t.test(cases,control)$p.value
}
a <- matrix(c(rnorm(100,0,1),NA),ncol=1)
b <- matrix(NA,c(rnorm(100,0,1)),ncol=1)
a
library(kernlab)
MMD
dat2 <- cbind(a,b)
dim(a)
dim(b)
b <- matrix(c(NA,rnorm(100,0,1)),ncol=1)
dat2 <- cbind(a,b)
load("M://research/paper/2015bioinfomatics_matsui/revise2/sim_main/v3_sim_3.RData")
fname <- list.files("M://research/paper/2015bioinfomatics_matsui/revise2/sim_main/",full.names = T)
fname <- fname[grep("*.txt",fname)]
fname <- fname[grep("*_res.txt",fname,invert = T)]
res_tb[,seq(1,16,by=2)]
xtable(res_tb[,seq(1,16,by=2)]*100)
library(xtable)
xtable(res_tb[,seq(1,16,by=2)]*100,digits=3)
xtable(res_tb[,seq(1,16,by=2)]*100,digits=2)
xtable(res_tb[,seq(2,16,by=2)],digits=2)
xtable(simstat2,digits=2)
library(data.table)
dat <- vector("list",length(fname))
names(dat) <- paste0("case",1:8)
for(i in seq_along(fname)){
dat[[i]] <- fread(fname[i], header=F)
}
case <- vector("list",length(fname))
control <- vector("list",length(fname))
names(case) <- paste0("case",1:8)
names(control) <- paste0("case",1:8)
for(i in seq_along(fname)){
case[[i]] <- dat[[i]][,1:40,with=F]
control[[i]] <- dat[[i]][,41:80,with=F]
}
mcase <- unlist(lapply(case,function(x)mean(apply(x,1,mean,na.rm=T),na.rm=T)))
mcontrol <- unlist(lapply(control,function(x)mean(apply(x,1,mean,na.rm=T),na.rm=T)))
scase <- unlist(lapply(case,function(x)mean(apply(x,1,sd,na.rm=T),na.rm=T)))
scontrol <- unlist(lapply(control,function(x)mean(apply(x,1,sd,na.rm=T),na.rm=T)))
simstat2 <- cbind(mcase,cbind(mcontrol,cbind(umean = simstat[,1],cbind(uvar = simstat[,2],cbind(scase,cbind(scontrol,cbind(smean=simstat[,3],svar=simstat[,4])))))))
xtable(simstat2,digits=2)
library(ape)
data1 <- rtree(10)
data1 <- lapply(1:5,function(x)rtree(10))
data1
library(ggplot2)
dat <- data.frame(name=c("a","b","a","c","a","b","d","c"),
val=c(1,-1.2,2.2,0.9,-0.7,2.4,-2.3,0.6),
sd=c(0.2,0.3,0.25,0.2,0.25,0.6,0.56,0.2),
p=c(0.09,0.1,0.02,0.1,0.2,0.001,0.001,0.6),
grp=c("A","A","B","B","C","C","C","C"))
ggplot(aes(x=name,y=val,width=0.5,ymin=val-sd,ymax=val+sd),data=dat)
+geom_bar(stat="identity",position="dodge") +
geom_errorbar(stat="identity",position="dodge") + facet_grid(~grp,
scales="free_x",space="free",margin=FALSE)
load("D:/abe_msms/msms/msms.Rproj")
x1 <- 42500
x2 <- 40400
s1 <- 2200
s2 <- 1500
n1 <- 20
n2 <- 40
sp <- sqrt(((n1-1)*s1^2 + (n2-1)*s2^2) / n1+n2-2)
sp
t0 <- (x1-x2)/(sp*sqrt(1/(n1)+1/(n2)))
ci <- (x1-x2)+1.99*sp*sqrt(1/n1+1/n2)
ci
ci <- c((x1-x2)-1.99*sp*sqrt(1/n1+1/n2),(x1-x2)+1.99*sp*sqrt(1/n1+1/n2))
ci
t0
x1-x2
t0
2.92/2
qt(0.05)
qt(0.05,df = 70-1)
qt(0.05,df = 70-2)
qt(0.05,df = 88)
qt(0.025,df = 88)
qt(0.025,df = 88,lower.tail = F)
n1 <- 21
n2 <- 41
sp <- sqrt(((n1-1)*s1^2 + (n2-1)*s2^2) / n1+n2-2)
t0 <- (x1-x2)/(sp*sqrt(1/(n1)+1/(n2)))
t0
1.671/2
n1 <- 61
n2 <- 61
sp <- sqrt(((n1-1)*s1^2 + (n2-1)*s2^2) / n1+n2-2)
t0 <- (x1-x2)/(sp*sqrt(1/(n1)+1/(n2)))
t0
n1 <- 81
n2 <- 41
sp <- sqrt(((n1-1)*s1^2 + (n2-1)*s2^2) / n1+n2-2)
t0 <- (x1-x2)/(sp*sqrt(1/(n1)+1/(n2)))
t0
sp <- sqrt(((n1-1)*s1^2 + (n2-1)*s2^2) / (n1+n2-2))
t0 <- (x1-x2)/(sp*sqrt(1/(n1)+1/(n2)))
n1 <- 21
n2 <- 41
sp <- sqrt(((n1-1)*s1^2 + (n2-1)*s2^2) / (n1+n2-2))
t0 <- (x1-x2)/(sp*sqrt(1/(n1)+1/(n2)))
t0
require(FirebrowseR)
cohorts = Metadata.Cohorts() # Download all available cohorts
cancerName <- cohorts$cohort
dat <- vector("list",length(cancerName))
names(dat) <- cancerName
cancerNum <- vector("list",nrow(cohorts))
for(i in seq_along(cancerName)){
cat(cancerName[i],"\n")
cancer.Type = cancerName[i]
all.Received = F
page.Counter = 1
brca.Pats = list()
while(all.Received == F){
brca.Pats[[page.Counter]] = Samples.Clinical_FH(cohort = cancer.Type,
page = page.Counter)
if(page.Counter > 1)
colnames(brca.Pats[[page.Counter]]) = colnames(brca.Pats[[page.Counter-1]])
if(nrow(brca.Pats[[page.Counter]]) < 250){
all.Received = T
} else{
page.Counter = page.Counter + 1
}
}
brca.Pats = do.call(rbind, brca.Pats)
dim(brca.Pats)
cancerNum[[i]] <- nrow(brca.Pats)
diff.Exp.Genes <- c("NECAB3","APBA3","MMP14")
all.Found = F
page.Counter = 1
mRNA.Exp = list()
page.Size = 2000 # using a bigger page size is faster
temp <- Samples.mRNASeq(gene = diff.Exp.Genes,
tcga_participant_barcode = brca.Pats$tcga_participant_barcode,
page_size = page.Size,
page = page.Counter)
if(is.null(temp)){cat("Null then next iteration");next}
if(nrow(temp)==0){cat("Null then next iteration");next}
while(all.Found == F){
temp <- Samples.mRNASeq(gene = diff.Exp.Genes,
tcga_participant_barcode = brca.Pats$tcga_participant_barcode,
page_size = page.Size,
page = page.Counter)
temp <- temp[temp$cohort==cancer.Type,]
mRNA.Exp[[page.Counter]] = temp
if(nrow(mRNA.Exp[[page.Counter]]) < page.Size)
all.Found = T
else
page.Counter = page.Counter + 1
}
mRNA.Exp = do.call(rbind, mRNA.Exp)
dim(mRNA.Exp)
# Patients with normal tissue
normal.Tissue.Pats = which(mRNA.Exp$sample_type == "NT")
# get the patients barcodes
patient.Barcodes = mRNA.Exp$tcga_participant_barcode[normal.Tissue.Pats]
# Subset the mRNA.Exp data frame, keeping only the pre-selected barcodes AND
# having a sample type of NT or TP
mRNA.Exp = mRNA.Exp[which(mRNA.Exp$tcga_participant_barcode %in% patient.Barcodes &
mRNA.Exp$sample_type %in% c("NT", "TP")), ]
dat[[i]] <- mRNA.Exp
cat(i,"\n")
}
require(FirebrowseR)
cohorts = Metadata.Cohorts() # Download all available cohorts
cancerName <- cohorts$cohort
dat <- vector("list",length(cancerName))
names(dat) <- cancerName
cancerNum <- vector("list",nrow(cohorts))
for(i in seq_along(cancerName)){
cat(cancerName[i],"\n")
cancer.Type = cancerName[i]
all.Received = F
page.Counter = 1
brca.Pats = list()
while(all.Received == F){
brca.Pats[[page.Counter]] = Samples.Clinical_FH(cohort = cancer.Type,
page = page.Counter)
if(page.Counter > 1)
colnames(brca.Pats[[page.Counter]]) = colnames(brca.Pats[[page.Counter-1]])
if(nrow(brca.Pats[[page.Counter]]) < 250){
all.Received = T
} else{
page.Counter = page.Counter + 1
}
}
brca.Pats = do.call(rbind, brca.Pats)
dim(brca.Pats)
cancerNum[[i]] <- nrow(brca.Pats)
diff.Exp.Genes <- c("NECAB3","APBA3","MMP14")
all.Found = F
page.Counter = 1
mRNA.Exp = list()
page.Size = 2000 # using a bigger page size is faster
temp <- Samples.mRNASeq(gene = diff.Exp.Genes,
tcga_participant_barcode = brca.Pats$tcga_participant_barcode,
page_size = page.Size,
page = page.Counter)
if(is.null(temp)){cat("Null then next iteration");next}
if(nrow(temp)==0){cat("Null then next iteration");next}
while(all.Found == F){
temp <- Samples.mRNASeq(gene = diff.Exp.Genes,
tcga_participant_barcode = brca.Pats$tcga_participant_barcode,
page_size = page.Size,
page = page.Counter)
temp <- temp[temp$cohort==cancer.Type,]
mRNA.Exp[[page.Counter]] = temp
if(nrow(mRNA.Exp[[page.Counter]]) < page.Size)
all.Found = T
else
page.Counter = page.Counter + 1
}
mRNA.Exp = do.call(rbind, mRNA.Exp)
dim(mRNA.Exp)
library(distory)
library(distry)
install.packages("distory")
library(distrory)
library(distory)
?dist.multiPhylo
dist.multiPhylo
t1 <- rtree(5)
t2 <- rtree(7)
t1 <- t2 <- rtree(5)
t2$edge.length[length(t2$edge.length)] <- 1
dist.multiPhylo(list(t1,t2))
library(distory)
t1 <- t2 <- rtree(5)
t1$edge.length[length(t1$edge.length)] <- 1
t2$edge.length[length(t2$edge.length)] <- 1
dist.multiPhylo(list(t1,t2))
t1 <- t2 <- rtree(5)
t1$edge
library(distory)
t1 <- t2 <- rtree(5)
#t1$edge.length[length(t1$edge.length)] <- 1
t2$edge.length[1] <- 1
dist.multiPhylo(list(t1,t2))
?image
?hclust
kmeans
dot
library(TESS)
install.packages("simTree")
install.packages("treeSim")
install.packages("TreeSim")
library(TreeSim)
n<-10
lambda <- 2.0
mu <- 0.5
frac <-0.6
numbsim<-2
age<-2
##
# Simulating numbsim reconstructed trees with n sampled species under a
# birth-death process with speciation rate lambda, extinction rate mu,
# sampling probability frac, and time age since origin:
trees<-sim.bd.taxa.age(n, numbsim, lambda, mu, frac, age, mrca = FALSE)
treec<-cuttree(trees[[1]],0.3)
plot(trees[[1]])
plot(treec)
treec<-cuttree(trees[[1]],cuttime = c(1,2))
treec<-cuttree(trees[[1]],cuttime = c(0.1,0.3))
load("D:/Dropbox (RWDC)/matsui/mybackup/k-tree/ktree/simulation1.RData")
par(list(mfrow=c(4,10),mar=c(0,0,0,0)))
for(i in seq_along(regis_tree)){}
for(i in seq_along(regis_tree)){plot.phylo(regis_tree[[i]])}
library(ape)
for(i in seq_along(regis_tree)){plot.phylo(regis_tree[[i]])}
for(i in seq_along(regis_tree)){plot.phylo(trees[[i]])}
for(i in seq_along(regis_tree)){plot.phylo(trees[[i]],edge.color = cls[i])}
for(i in seq_along(regis_tree)){plot.phylo(trees[[i]],edge.color = cls[i],type="unrooted")}
for(i in seq_along(regis_tree)){plot.phylo(trees[[i]],edge.color = cls[i],type="cladegram")}
for(i in seq_along(regis_tree)){plot.phylo(trees[[i]],edge.color = cls[i],type="clade")}
for(i in seq_along(regis_tree)){plot.phylo(trees[[i]],edge.color = cls[i],type="cladegram")}
for(i in seq_along(regis_tree)){plot.phylo(trees[[i]],edge.color = cls[i],type="cladogram")}
library(rgl)
plot3d(cmd$points)
plot3d(cmd$points,size=5,col=cls)
plot3d(cmd$points,size=5,col=cls,type="s")
plot3d(cmd$points,size=5,col=cls2,type="s")
plot3d(cmd$points,size=5,col=cls,type="s")
plot3d(cmd$points,size=2,col=cls,type="s")
for(i in seq_along(regis_tree)){plot.phylo(simdata[[1]][[i]],edge.color = cls.hc[[1]][i],type="cladogram")}
par(para)
plot(cmd$points[,1:2])
plot(cmd$points[,1:2])
library("phyC", lib.loc="~/R/win-library/3.2")
library("phyC", lib.loc="~/R/win-library/3.2")
library(phyC)
##generate edgeList and edgeLenList##
trees <- c(rmtree(5,3),rmtree(5,4))
edgeList <- lapply(trees,function(x)x$edge)
edgeLenList <- lapply(trees,function(x)x$edge.length)
##adopting phyC##
res <- phyC(edgeList,edgeLenList,cluster=2,type='nh')
phyCMD(res)
library("phyC", lib.loc="~/R/win-library/3.2")
library(phyC)
##generate edgeList and edgeLenList##
trees <- c(rmtree(5,3),rmtree(5,4))
edgeList <- lapply(trees,function(x)x$edge)
edgeLenList <- lapply(trees,function(x)x$edge.length)
##adopting phyC##
res <- phyC(edgeList,edgeLenList,cluster=2,type='nh')
phyCMD(res)
library("phyC", lib.loc="~/R/win-library/3.2")
library(phyC)
##generate edgeList and edgeLenList##
trees <- c(rmtree(5,3),rmtree(5,4))
edgeList <- lapply(trees,function(x)x$edge)
edgeLenList <- lapply(trees,function(x)x$edge.length)
##adopting phyC##
res <- phyC(edgeList,edgeLenList,cluster=2,type='nh')
phyCMD(res)
phyCMD
library(phyC)
library(phyC)
##generate edgeList and edgeLenList##
trees <- c(rmtree(5,3),rmtree(5,4))
edgeList <- lapply(trees,function(x)x$edge)
edgeLenList <- lapply(trees,function(x)x$edge.length)
##adopting phyC##
res <- phyC(edgeList,edgeLenList,cluster=2,type='nh')
phyCMD(res)
library(grDevice)
library(grDevices)
library(phyC)
##generate edgeList and edgeLenList##
trees <- c(rmtree(5,3),rmtree(5,4))
edgeList <- lapply(trees,function(x)x$edge)
edgeLenList <- lapply(trees,function(x)x$edge.length)
##adopting phyC##
res <- phyC(edgeList,edgeLenList,cluster=2,type='nh')
phyCMD(res)
readPNG
library(png)
library(phyC)
##generate edgeList and edgeLenList##
trees <- c(rmtree(5,3),rmtree(5,4))
edgeList <- lapply(trees,function(x)x$edge)
edgeLenList <- lapply(trees,function(x)x$edge.length)
##adopting phyC##
res <- phyC(edgeList,edgeLenList,cluster=2,type='nh')
phyCMD(res)
library(phyC)
library(phyC)
##generate edgeList and edgeLenList##
trees <- c(rmtree(5,3),rmtree(5,4))
edgeList <- lapply(trees,function(x)x$edge)
edgeLenList <- lapply(trees,function(x)x$edge.length)
##adopting phyC##
res <- phyC(edgeList,edgeLenList,cluster=2,type='nh')
phyCMD(res)
library(PhyC)
data(evol)
##adopting phyC##
res <- phyC(evol$edgeList,evol$edgeLenList,cluster=4,type='nh')
phyC.plot(res)
setwd("D://Dropbox (RWDC)/matsui/mybackup/ISMB2016/package/phyC/")
library(roxygen2)
library(devtools)
roxygenise(clean = T)
library(PhyC)
data(evol)
##adopting phyC##
res <- phyC(evol$edgeList,evol$edgeLenList,cluster=4,type='nh')
phyC.plot(res)
evol
evol$ccRCC-case1
evol$ccRCC-case1
evol$'ccRCC-case1'
edgeList <- lapply(evol,function(x)x$edgeLenList)
edgeList <- lapply(evol,function(x)x$edgeList)
edgeLenList <- lapply(evol,function(x)x$edgeLenList)
evol <- list(edgeList=edgeList,edgeLenList=edgeLenList)
evol$edgeList
save("evol",file = "data/evol.RData")
devtools::use_data(evol,overwrite = T)
devtools::use_data(overwrite = T)
getwd()
setwd("dat")
setwd("data")
devtools::use_data(evol,overwrite = T)
devtools::use_data(evol,overwrite = T,pkg = "./../R/")
